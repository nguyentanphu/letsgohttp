// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	validator "github.com/go-playground/validator/v10"
)

// UserModelInterface is an autogenerated mock type for the UserModelInterface type
type UserModelInterface struct {
	mock.Mock
}

// Authenticate provides a mock function with given fields: email, password
func (_m *UserModelInterface) Authenticate(email string, password string) (int, error) {
	ret := _m.Called(email, password)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (int, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) int); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EmailExists provides a mock function with given fields: email
func (_m *UserModelInterface) EmailExists(email string) (bool, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for EmailExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Exists provides a mock function with given fields: id
func (_m *UserModelInterface) Exists(id int) (bool, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: name, email, password
func (_m *UserModelInterface) Insert(name string, email string, password string) error {
	ret := _m.Called(name, email, password)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(name, email, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UniqueEmailValidator provides a mock function with given fields: fl
func (_m *UserModelInterface) UniqueEmailValidator(fl validator.FieldLevel) bool {
	ret := _m.Called(fl)

	if len(ret) == 0 {
		panic("no return value specified for UniqueEmailValidator")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(validator.FieldLevel) bool); ok {
		r0 = rf(fl)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewUserModelInterface creates a new instance of UserModelInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserModelInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserModelInterface {
	mock := &UserModelInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
